<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="4541a19e-81ad-4482-8b04-19673d9ae92f" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/native/ext.manifest" beforeDir="false" afterPath="$PROJECT_DIR$/native/ext.manifest" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/native/src/3d_render.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/native/src/3d_render.cpp" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="FUSProjectUsageTrigger">
    <session id="1853133306">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="3" />
          <entry key="project.open.time.0" value="2" />
          <entry key="project.open.time.2" value="1" />
          <entry key="project.open.time.4" value="1" />
          <entry key="project.open.time.5" value="4" />
          <entry key="project.open.time.6" value="4" />
          <entry key="project.opened" value="12" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.open">
        <counts>
          <entry key="appmanifest" value="1" />
          <entry key="atlas" value="1" />
          <entry key="collection" value="3" />
          <entry key="gui" value="8" />
          <entry key="gui_script" value="94" />
          <entry key="lua" value="635" />
          <entry key="project" value="1" />
          <entry key="render_script" value="1" />
          <entry key="script" value="28" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="PLAIN_TEXT" value="14" />
          <entry key="lua" value="758" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.js.language.service.starts" />
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="PLAIN_TEXT" value="51" />
          <entry key="lua" value="25142" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.vcs.git.usages" />
      <usages-collector id="statistics.file.extensions.edit">
        <counts>
          <entry key="dummy" value="51" />
          <entry key="gui_script" value="2520" />
          <entry key="lua" value="20637" />
          <entry key="render_script" value="4" />
          <entry key="script" value="1981" />
        </counts>
      </usages-collector>
    </session>
    <session id="-562282797">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.open.time.3" value="1" />
          <entry key="project.open.time.5" value="1" />
          <entry key="project.opened" value="2" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.edit">
        <counts>
          <entry key="lua" value="864" />
          <entry key="script" value="57" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="lua" value="921" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.open">
        <counts>
          <entry key="lua" value="57" />
          <entry key="script" value="13" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="lua" value="70" />
        </counts>
      </usages-collector>
    </session>
    <session id="-1219669820">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="2" />
          <entry key="project.open.time.0" value="2" />
          <entry key="project.open.time.5" value="1" />
          <entry key="project.opened" value="3" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.open">
        <counts>
          <entry key="collection" value="1" />
          <entry key="cpp" value="208" />
          <entry key="gui_script" value="1" />
          <entry key="h" value="129" />
          <entry key="json" value="25" />
          <entry key="lua" value="117" />
          <entry key="manifest" value="1" />
          <entry key="render_script" value="2" />
          <entry key="script" value="15" />
          <entry key="txt" value="27" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="C/C++" value="337" />
          <entry key="JSON" value="25" />
          <entry key="PLAIN_TEXT" value="29" />
          <entry key="lua" value="135" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.edit">
        <counts>
          <entry key="cpp" value="13100" />
          <entry key="dummy" value="5" />
          <entry key="h" value="959" />
          <entry key="json" value="1115" />
          <entry key="lua" value="2802" />
          <entry key="render_script" value="77" />
          <entry key="script" value="203" />
          <entry key="txt" value="491" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="C/C++" value="14059" />
          <entry key="JSON" value="1115" />
          <entry key="PLAIN_TEXT" value="496" />
          <entry key="lua" value="3082" />
        </counts>
      </usages-collector>
    </session>
  </component>
  <component name="FavoritesManager">
    <favorites_list name="Game Off 2018" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/native/src/3d_render.cpp">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="304">
              <caret line="19" column="46" selection-start-line="19" selection-start-column="46" selection-end-line="19" selection-end-column="46" />
              <folding>
                <element signature="n#{&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;    vertices.push_back((struct xy){x,y})\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}#0;n#void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}#0;n#void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}#0;n#void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}#0;n#void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }#0;n#else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }#0;n#{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}#0;n#static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}#0;n#void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;    clearBuffer(pixelBuffer)\h&#10;}#0;n#void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}#0;n#void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}#0;n#void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}#0;n#void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
                <element signature="n#{&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}#0;n#void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}#0;n#void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="NewLua" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>vertexes</find>
      <find>vertex</find>
      <find>vert</find>
      <find>vertices</find>
      <find>LoadL</find>
      <find>sect</find>
      <find>neighbors</find>
      <find>set</find>
      <find>MovePlayer</find>
      <find>sect.vertex.size()</find>
      <find>vertex.size()</find>
      <find>printf</find>
      <find>Load</find>
      <find>n</find>
      <find>MoveP</find>
      <find>ERR</find>
      <find>LoadLe</find>
      <find>height_h</find>
      <find>MapC</find>
      <find>sectors</find>
      <find>pr</find>
      <find>print</find>
      <find>PlayerInit</find>
      <find>SetA</find>
      <find>Che</find>
      <find>HeadMargin</find>
      <find>buffer</find>
      <find>clearB</find>
      <find>clearBuffer</find>
      <find>RenderClearBuffer</find>
    </findStrings>
    <replaceStrings>
      <replace />
      <replace>SubscriptionStorage</replace>
      <replace>ceil_h</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/gui/recycle_list_adapter.lua" />
        <option value="$PROJECT_DIR$/libs/gui_utils.lua" />
        <option value="$PROJECT_DIR$/scenes/game/scenes/inventory/gui/gui.gui_script" />
        <option value="$PROJECT_DIR$/gui/recycler_list_adapter.lua" />
        <option value="$PROJECT_DIR$/gui/project/inventory_list_adapter.lua" />
        <option value="$PROJECT_DIR$/gui/recycler_list.lua" />
        <option value="$PROJECT_DIR$/world/units_table.lua" />
        <option value="$PROJECT_DIR$/scenes/game/gui/main/main_gui.gui_script" />
        <option value="$PROJECT_DIR$/gui/updated_label.lua" />
        <option value="$PROJECT_DIR$/scenes/game/scenes/battle/gui/gui.gui_script" />
        <option value="$PROJECT_DIR$/libs/log.lua" />
        <option value="$PROJECT_DIR$/scenes/game/scripts/background_scroll_script.script" />
        <option value="$PROJECT_DIR$/gui/follow_go_script.lua" />
        <option value="$PROJECT_DIR$/scenes/game/gui/main/follow_go.gui_script" />
        <option value="$PROJECT_DIR$/scenes/game/gui/main/progress.gui_script" />
        <option value="$PROJECT_DIR$/world/hero.lua" />
        <option value="$PROJECT_DIR$/world/unit.lua" />
        <option value="$PROJECT_DIR$/libs/complex_subscription.lua" />
        <option value="$PROJECT_DIR$/libs/proxy_subscription.lua" />
        <option value="$PROJECT_DIR$/world/view/hero_cell_view.lua" />
        <option value="$PROJECT_DIR$/libs/subscription_storage.lua" />
        <option value="$PROJECT_DIR$/libs/multiple_subscription.lua" />
        <option value="$PROJECT_DIR$/libs/context_subscription.lua" />
        <option value="$PROJECT_DIR$/gui/debug/debug_game_gui.gui_script" />
        <option value="$PROJECT_DIR$/libs/scripts/script.lua" />
        <option value="$PROJECT_DIR$/libs/scripts/gui_follow_go_go_script.lua" />
        <option value="$PROJECT_DIR$/libs/scripts/gui_follow_go.script" />
        <option value="$PROJECT_DIR$/libs/scripts/gui_follow_go_gui_script.lua" />
        <option value="$PROJECT_DIR$/libs/observable_mixin.lua" />
        <option value="$PROJECT_DIR$/init_controller.script" />
        <option value="$PROJECT_DIR$/native_render/update_texture.script" />
        <option value="$PROJECT_DIR$/render/my.render_script" />
        <option value="$PROJECT_DIR$/scenes/game/game_scene.lua" />
        <option value="$PROJECT_DIR$/world/world.lua" />
        <option value="$PROJECT_DIR$/libs/hashes.lua" />
        <option value="$PROJECT_DIR$/libs/scripts/scripts_container.lua" />
        <option value="$PROJECT_DIR$/scenes/game/go/player.script" />
        <option value="$PROJECT_DIR$/libs/common.lua" />
        <option value="$PROJECT_DIR$/lock/extension/src/LockMouse.cpp" />
        <option value="$PROJECT_DIR$/world/player.lua" />
        <option value="$PROJECT_DIR$/world/Map.lua" />
        <option value="$PROJECT_DIR$/assets/levels/map_clear.txt" />
        <option value="$PROJECT_DIR$/scenes/game/go/player_input.lua" />
        <option value="$PROJECT_DIR$/assets/levels/map_clear.json" />
        <option value="$PROJECT_DIR$/native_render/helper.lua" />
        <option value="$PROJECT_DIR$/world/map.lua" />
        <option value="$PROJECT_DIR$/native/include/buffr.h" />
        <option value="$PROJECT_DIR$/native/include/3d_render.h" />
        <option value="$PROJECT_DIR$/native/src/binding.cpp" />
        <option value="$PROJECT_DIR$/native/include/buffer.h" />
        <option value="$PROJECT_DIR$/native/src/3d_render.cpp" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="-12" />
    <option name="y" value="44" />
    <option name="width" value="1475" />
    <option name="height" value="1038" />
  </component>
  <component name="ProjectInspectionProfilesVisibleTreeState">
    <entry key="Project Default">
      <profile-state>
        <expanded-state>
          <State />
          <State>
            <id>Android</id>
          </State>
          <State>
            <id>Assignment issuesGroovy</id>
          </State>
          <State>
            <id>CSS</id>
          </State>
          <State>
            <id>Class structureJava</id>
          </State>
          <State>
            <id>Code maturityJava</id>
          </State>
          <State>
            <id>Code style issuesCSS</id>
          </State>
          <State>
            <id>Code style issuesJava</id>
          </State>
          <State>
            <id>Code style issuesJavaScript</id>
          </State>
          <State>
            <id>Concurrency annotation issuesJava</id>
          </State>
          <State>
            <id>Control flow issuesGroovy</id>
          </State>
          <State>
            <id>Control flow issuesJava</id>
          </State>
          <State>
            <id>Control flow issuesJavaScript</id>
          </State>
          <State>
            <id>CorrectnessLintAndroid</id>
          </State>
          <State>
            <id>Data flowGroovy</id>
          </State>
          <State>
            <id>Data flowJava</id>
          </State>
          <State>
            <id>Declaration redundancyJava</id>
          </State>
          <State>
            <id>DeclarationGroovy</id>
          </State>
          <State>
            <id>ECMAScript 6 migration aidsJavaScript</id>
          </State>
          <State>
            <id>Error handlingGroovy</id>
          </State>
          <State>
            <id>Error handlingJava</id>
          </State>
          <State>
            <id>Error handlingJavaScript</id>
          </State>
          <State>
            <id>FinalizationJava</id>
          </State>
          <State>
            <id>General</id>
          </State>
          <State>
            <id>GeneralJavaScript</id>
          </State>
          <State>
            <id>Groovy</id>
          </State>
          <State>
            <id>Guice</id>
          </State>
          <State>
            <id>HTML</id>
          </State>
          <State>
            <id>Inheritance issuesJava</id>
          </State>
          <State>
            <id>InternationalizationJava</id>
          </State>
          <State>
            <id>InternationalizationLintAndroid</id>
          </State>
          <State>
            <id>Invalid elementsCSS</id>
          </State>
          <State>
            <id>J2ME issuesJava</id>
          </State>
          <State>
            <id>JSON and JSON5</id>
          </State>
          <State>
            <id>JUnitJava</id>
          </State>
          <State>
            <id>Java</id>
          </State>
          <State>
            <id>Java 5Java language level migration aidsJava</id>
          </State>
          <State>
            <id>Java 7Java language level migration aidsJava</id>
          </State>
          <State>
            <id>Java 8Java language level migration aidsJava</id>
          </State>
          <State>
            <id>Java 9Java language level migration aidsJava</id>
          </State>
          <State>
            <id>Java language level issuesJava</id>
          </State>
          <State>
            <id>Java language level migration aidsJava</id>
          </State>
          <State>
            <id>JavaFX</id>
          </State>
          <State>
            <id>JavaScript</id>
          </State>
          <State>
            <id>JavaScript validity issuesJavaScript</id>
          </State>
          <State>
            <id>JavadocJava</id>
          </State>
          <State>
            <id>Kotlin</id>
          </State>
          <State>
            <id>LintAndroid</id>
          </State>
          <State>
            <id>LintLintAndroid</id>
          </State>
          <State>
            <id>Lua</id>
          </State>
          <State>
            <id>MemoryJava</id>
          </State>
          <State>
            <id>MessagesCorrectnessLintAndroid</id>
          </State>
          <State>
            <id>Node.jsJavaScript</id>
          </State>
          <State>
            <id>Other problemsKotlin</id>
          </State>
          <State>
            <id>Packaging issuesJava</id>
          </State>
          <State>
            <id>PerformanceJava</id>
          </State>
          <State>
            <id>PerformanceLintAndroid</id>
          </State>
          <State>
            <id>PortabilityJava</id>
          </State>
          <State>
            <id>Potentially confusing code constructsGroovy</id>
          </State>
          <State>
            <id>Potentially confusing code constructsJavaScript</id>
          </State>
          <State>
            <id>Probable bugsGroovy</id>
          </State>
          <State>
            <id>Probable bugsJava</id>
          </State>
          <State>
            <id>Probable bugsJavaScript</id>
          </State>
          <State>
            <id>Probable bugsKotlin</id>
          </State>
          <State>
            <id>Properties Files</id>
          </State>
          <State>
            <id>Reactor</id>
          </State>
          <State>
            <id>Redundant constructsKotlin</id>
          </State>
          <State>
            <id>Reflective accessJava</id>
          </State>
          <State>
            <id>RegExp</id>
          </State>
          <State>
            <id>Resource managementJava</id>
          </State>
          <State>
            <id>SQL</id>
          </State>
          <State>
            <id>SecurityJava</id>
          </State>
          <State>
            <id>SecurityLintAndroid</id>
          </State>
          <State>
            <id>Style issuesKotlin</id>
          </State>
          <State>
            <id>StyleGroovy</id>
          </State>
          <State>
            <id>Threading issuesGroovy</id>
          </State>
          <State>
            <id>Threading issuesJava</id>
          </State>
          <State>
            <id>TypeScript</id>
          </State>
          <State>
            <id>TypographyUsabilityLintAndroid</id>
          </State>
          <State>
            <id>UsabilityLintAndroid</id>
          </State>
          <State>
            <id>Validity issuesGroovy</id>
          </State>
          <State>
            <id>Verbose or redundant code constructsJava</id>
          </State>
          <State>
            <id>VisibilityJava</id>
          </State>
          <State>
            <id>XML</id>
          </State>
          <State>
            <id>XPath</id>
          </State>
          <State>
            <id>XSLT</id>
          </State>
          <State>
            <id>YAML</id>
          </State>
        </expanded-state>
        <selected-state>
          <State>
            <id>Android</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="assets" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="assets" type="462c0819:PsiDirectoryNode" />
              <item name="levels" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="native" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="native" type="462c0819:PsiDirectoryNode" />
              <item name="include" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="native" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="scenes" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="scenes" type="462c0819:PsiDirectoryNode" />
              <item name="game" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="scenes" type="462c0819:PsiDirectoryNode" />
              <item name="game" type="462c0819:PsiDirectoryNode" />
              <item name="go" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="ExCretitsJam2018" type="b2602c69:ProjectViewProjectNode" />
              <item name="ExCretitsJam2018" type="462c0819:PsiDirectoryNode" />
              <item name="world" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1545085254513" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../SaveShelter(Wolfenstein3d)" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="project.structure.last.edited" value="Libraries" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="settings.editor.selected.configurable" value="editing.templates" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\user\DefoldProjects\ExCretitsJam2018\native\include" />
      <recent name="C:\Users\user\DefoldProjects\ExCretitsJam2018" />
      <recent name="C:\Users\user\DefoldProjects\ExCretitsJam2018\native" />
      <recent name="C:\Users\user\DefoldProjects\ExCretitsJam2018\native\src" />
      <recent name="C:\Users\user\DefoldProjects\Idle\libs\scripts" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\user\DefoldProjects\ExCretitsJam2018\assets\levels" />
      <recent name="C:\Users\user\DefoldProjects\Game Off 2018\libs\scripts" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4541a19e-81ad-4482-8b04-19673d9ae92f" name="Default Changelist" comment="" />
      <created>1540974856633</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1540974856633</updated>
      <workItem from="1540974857932" duration="941000" />
      <workItem from="1541276731397" duration="57760000" />
      <workItem from="1541533339146" duration="1960000" />
      <workItem from="1541712577634" duration="1393000" />
      <workItem from="1541794935436" duration="198000" />
      <workItem from="1541795151592" duration="3235000" />
      <workItem from="1541875419555" duration="599000" />
      <workItem from="1542090729474" duration="5195000" />
      <workItem from="1542447323397" duration="21151000" />
      <workItem from="1543696387826" duration="1206000" />
      <workItem from="1543700851503" duration="624000" />
      <workItem from="1544122280764" duration="6592000" />
      <workItem from="1544219558731" duration="3709000" />
      <workItem from="1544732186654" duration="1896000" />
      <workItem from="1544814545271" duration="1117000" />
      <workItem from="1544815889010" duration="68603000" />
      <workItem from="1545119549616" duration="3536000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="179715000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="-12" y="44" width="1475" height="1038" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" sideWeight="0.49845678" visible="true" weight="0.1987315" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="Learn" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" sideWeight="0.5015432" side_tool="true" weight="0.18573551" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="LuaCheck" order="7" />
      <window_info active="true" anchor="bottom" id="Version Control" order="8" sideWeight="0.4989429" visible="true" weight="0.1641791" />
      <window_info anchor="bottom" id="Database Changes" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="Terminal" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" sideWeight="0.5010571" side_tool="true" visible="true" weight="0.1641791" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Capture Analysis" order="3" />
      <window_info anchor="right" id="Theme Preview" order="4" />
      <window_info anchor="right" id="Palette&#9;" order="5" />
      <window_info anchor="right" id="Database" order="6" weight="0.21902655" />
      <window_info anchor="right" id="Maven Projects" order="7" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="Cpp">
          <url>file://$PROJECT_DIR$/native/src/3d_render.cpp</url>
          <line>311</line>
          <option name="timeStamp" value="3" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="Cpp">
          <url>file://$PROJECT_DIR$/native/src/3d_render.cpp</url>
          <line>149</line>
          <option name="timeStamp" value="5" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/Jester/scene.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-560">
          <caret line="19" column="26" lean-forward="true" selection-start-line="19" selection-start-column="26" selection-end-line="19" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/Jester/proxy_loader.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="48">
          <caret line="3" column="11" selection-start-line="3" selection-start-column="11" selection-end-line="3" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/Jester/proxy_scene.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="402">
          <caret line="35" selection-start-line="35" selection-end-line="39" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/debug.appmanifest">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="80">
          <caret line="5" column="72" lean-forward="true" selection-start-line="5" selection-start-column="72" selection-end-line="5" selection-end-column="72" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/game.project">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/lume.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="301">
          <caret line="66" column="16" lean-forward="true" selection-start-line="66" selection-start-column="16" selection-end-line="66" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/world/unit.lua" />
    <entry file="jar://$APPLICATION_PLUGINS_DIR$/EmmyLua/lib/EmmyLua-1.2.5-IDEA182.jar!/std/Lua51/builtin.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="579">
          <caret line="99" column="10" selection-start-line="99" selection-start-column="10" selection-end-line="99" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/world/view/hero_cell_view.lua" />
    <entry file="file://$PROJECT_DIR$/libs/subscription_storage.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="240">
          <caret line="15" column="3" lean-forward="true" selection-start-line="15" selection-start-column="3" selection-end-line="15" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/multiple_subscription.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="368">
          <caret line="23" column="73" selection-start-line="23" selection-start-column="73" selection-end-line="23" selection-end-column="73" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/context_subscription.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="459">
          <caret line="38" column="45" lean-forward="true" selection-start-line="38" selection-start-column="45" selection-end-line="38" selection-end-column="45" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/gui/debug/debug_gui.script">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/gui/debug/debug_game_gui.gui_script">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="288">
          <caret line="18" column="3" lean-forward="true" selection-start-line="18" selection-start-column="3" selection-end-line="18" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scenes/game/untitled.script" />
    <entry file="file://$PROJECT_DIR$/libs/scripts/gui_follow_go.script">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="48">
          <caret line="3" column="27" selection-start-line="3" selection-start-column="27" selection-end-line="3" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/scripts/gui_follow_go_go_script.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="36" selection-start-column="36" selection-end-column="36" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/scripts/gui_follow_go_gui_script.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="48">
          <caret line="3" column="64" selection-start-line="3" selection-start-column="64" selection-end-line="3" selection-end-column="64" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/world/hero.lua" />
    <entry file="file://$PROJECT_DIR$/libs/observable_mixin.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="64">
          <caret line="16" column="41" lean-forward="true" selection-start-line="16" selection-start-column="41" selection-end-line="16" selection-end-column="41" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$APPLICATION_PLUGINS_DIR$/EmmyLua/lib/EmmyLua-1.2.5-IDEA182.jar!/std/Lua51/global.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="225">
          <caret line="81" column="9" selection-start-line="81" selection-start-column="9" selection-end-line="81" selection-end-column="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/world/lvl_table.lua" />
    <entry file="file://$PROJECT_DIR$/scenes/logo/logo_scene.lua">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/scenes/game/gui/main/progress.gui_script" />
    <entry file="file://$PROJECT_DIR$/init_controller.script">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="363">
          <caret line="33" column="7" selection-start-line="33" selection-start-column="7" selection-end-line="33" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/native/include/raycasting.h" />
    <entry file="file://$PROJECT_DIR$/native/include/micropather.h" />
    <entry file="file://$PROJECT_DIR$/scenes/game/game.collection">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/render/my.render_script">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="219">
          <caret line="60" column="77" selection-start-line="60" selection-start-column="77" selection-end-line="60" selection-end-column="77" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/native_render/update_texture.script">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="144">
          <caret line="9" lean-forward="true" selection-start-line="9" selection-end-line="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/scripts/script.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="352">
          <caret line="22" column="13" lean-forward="true" selection-end-line="22" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lock/extension/ext.manifest">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/hashes.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="217">
          <caret line="16" column="37" lean-forward="true" selection-start-line="16" selection-start-column="37" selection-end-line="17" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/input_receiver.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="270">
          <caret line="23" column="11" selection-start-line="23" selection-start-column="11" selection-end-line="23" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/scripts/scripts_container.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="181">
          <caret line="23" column="34" selection-start-line="23" selection-start-column="34" selection-end-line="23" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/libs/common.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="32">
          <caret line="2" column="23" lean-forward="true" selection-start-line="2" selection-start-column="23" selection-end-line="2" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/world/player.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="384">
          <caret line="24" lean-forward="true" selection-end-line="42" selection-end-column="8" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$USER_HOME$/development/Defold/defold_api(1.2.143).zip!/api/system.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="266">
          <caret line="56" column="13" selection-start-line="56" selection-start-column="13" selection-end-line="56" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/lock/extension/src/LockMouse.cpp">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="754">
          <caret line="89" lean-forward="true" selection-start-line="89" selection-end-line="89" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scenes/game/go/player_input.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="413">
          <caret line="44" column="55" selection-start-line="44" selection-start-column="55" selection-end-line="44" selection-end-column="55" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scenes/game/go/player.script">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="16">
          <caret line="1" column="30" selection-start-line="1" selection-start-column="30" selection-end-line="1" selection-end-column="30" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scenes/game/game_scene.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="37">
          <caret line="31" column="28" lean-forward="true" selection-start-line="31" selection-start-column="28" selection-end-line="31" selection-end-column="28" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/world/world.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="576">
          <caret line="36" column="19" selection-start-line="36" selection-start-column="19" selection-end-line="36" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/native_render/helper.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="416">
          <caret line="26" column="22" selection-start-line="26" selection-start-column="22" selection-end-line="26" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/levels/map_clear.txt" />
    <entry file="file://$PROJECT_DIR$/world/map.lua">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="112">
          <caret line="7" column="20" selection-start-line="7" selection-start-column="20" selection-end-line="7" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/levels/map_clear.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="602">
          <caret line="43" column="36" selection-start-line="43" selection-start-column="36" selection-end-line="43" selection-end-column="36" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/native/src/binding.cpp">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="240">
          <caret line="105" column="23" selection-start-line="105" selection-start-column="6" selection-end-line="105" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/native/include/3d_render.h">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="19" column="20" selection-start-line="19" selection-start-column="5" selection-end-line="19" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/native/include/buffer.h">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="448">
          <caret line="28" column="53" selection-start-line="28" selection-start-column="53" selection-end-line="28" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/native/src/3d_render.cpp">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="304">
          <caret line="19" column="46" selection-start-line="19" selection-start-column="46" selection-end-line="19" selection-end-column="46" />
          <folding>
            <element signature="n#{&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;    vertices.push_back((struct xy){x,y})\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}#0;n#void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}#0;n#void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}#0;n#void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}#0;n#void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }#0;n#else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }#0;n#{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}#0;n#static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}#0;n#void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;    }&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,y1,top)\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            DrawPixel(pixelBuffer,x,y,middle)\h&#10;        }&#10;        DrawPixel(pixelBuffer,x,y2,bottom)\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;    clearBuffer(pixelBuffer)\h&#10;}#0;n#void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}#0;n#void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}#0;n#void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}#0;n#void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
            <element signature="n#{&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}#0;n#void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}#0;n#void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0;n#\sinclude &lt;stdio.h&gt;&#10;\sinclude &lt;stdlib.h&gt;&#10;\sinclude &lt;string.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;dmsdk/sdk.h&gt;&#10;\sinclude &lt;math.h&gt;&#10;\sinclude &lt;vector&gt;&#10;\sinclude &quot;3d_render.h&quot;&#10;\sinclude &quot;buffer.h&quot;&#10;&#10;\sdefine DLIB_LOG_DOMAIN &quot;MapRender&quot;&#10;\sinclude &lt;dmsdk/dlib/log.h&gt;&#10;&#10;/* Define window size */&#10;/* Define various vision related constants */&#10;\sdefine EyeHeight  6    // Camera height from floor when standing&#10;\sdefine DuckHeight 2.5  // And when crouching&#10;\sdefine HeadMargin 1    // How much room there is above camera before the head hits the ceiling&#10;\sdefine KneeHeight 2    // How tall obstacles the player can simply walk over without jumping&#10;\sdefine hfov (0.73f*H)  // Affects the horizontal field of vision&#10;\sdefine vfov (.2f*H)    // Affects the vertical field of vision&#10;&#10;// Utility functions. Because C doesn't have templates,&#10;// we use the slightly less safe preprocessor macros to&#10;// implement these functions that work with multiple types.&#10;\sdefine min(a,b)             (((a) &lt; (b)) ? (a) : (b)) // min: Choose smaller of two scalars.&#10;\sdefine max(a,b)             (((a) &gt; (b)) ? (a) : (b)) // max: Choose greater of two scalars.&#10;\sdefine clamp(a, mi,ma)      min(max(a,mi),ma)         // clamp: Clamp value into set range.&#10;\sdefine vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product&#10;// Overlap:  Determine whether the two number ranges overlap.&#10;\sdefine Overlap(a0,a1,b0,b1) (min(a0,a1) &lt;= max(b0,b1) &amp;&amp; min(b0,b1) &lt;= max(a0,a1))&#10;// IntersectBox: Determine whether two 2D-boxes intersect.&#10;\sdefine IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) &amp;&amp; Overlap(y0,y1,y2,y3))&#10;// PointSide: Determine which side of a line the point is on. Return value: &lt;0, =0 or &gt;0.&#10;\sdefine PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))&#10;// Intersect: Calculate the point of intersection between two lines.&#10;\sdefine Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((struct xy) { \\&#10;    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \\&#10;    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })&#10;&#10;&#10;&#10;/* Sectors: Floor and ceiling height\h list of edge vertices and neighbors */&#10;//Sector is a room, where i can set floor and ceiling height&#10;//Sector can be 2 types. Wall and portal. We can see throw portal&#10;static  std::vector&lt;struct sector&gt; sectors\h&#10;static  std::vector&lt;struct xy&gt; vertices\h&#10;&#10;/*Player: location */&#10;static struct player player\h&#10;int ground = 0, falling = 1, moving = 1\h&#10;&#10;&#10;//region MAP&#10;void MapClear(){&#10;     sectors.clear()\h&#10;     vertices.clear()\h&#10;     ground = 0, falling = 1, moving = 1\h&#10;    player = (struct player) { {0,0,0}, {0,0,0}, 0,0,0,0, 0 }\h&#10;}&#10;&#10;void MapVertexAdd(float x, float y){&#10;    vertices.push_back((struct xy){x,y})\h&#10;}&#10;&#10;void MapVertexChange(int idx,float x, float y){&#10;    if (idx &lt;vertices.size()){&#10;        struct xy v = vertices[idx]\h&#10;        v.x = x\h v.y = y\h&#10;    }else{&#10;        dmLogError(&quot;no vertex with idx:%d&quot;, idx)\h&#10;    }&#10;}&#10;&#10;&#10;void MapSectorCreate(float floor, float ceil){&#10;    struct sector s\h&#10;    s.floor = floor\h s.ceil = ceil\h&#10;    sectors.push_back(s)\h&#10;}&#10;//add to last sector in list&#10;void MapSectorVertexAdd(int vertex,int neighbor){&#10;    if (sectors.size() != 0){&#10;        sector &amp;s = sectors[sectors.size()-1]\h&#10;        if (vertex &gt;= 0 &amp;&amp; vertex &lt;vertices.size()){ s.vertex.push_back(vertex)\h}&#10;        else{ dmLogError(&quot;no vertex with idx:%d&quot;, vertex)\hreturn\h}&#10;        //todo check neighbors sector\h&#10;        s.neighbors.push_back(neighbor)\h&#10;    }else{&#10;        dmLogError(&quot;can't add vertex.No sectors&quot;)\h&#10;    }&#10;}\h&#10;&#10;void MapCheck(){&#10;    for(int i=0\hi&lt;sectors.size()\hi++){&#10;        sector &amp;s = sectors[i]\h&#10;        if(s.neighbors.size()&lt;3){&#10;            dmLogError(&quot;bad sector:%d&quot;, i)\h&#10;            return\h&#10;        }&#10;        for(int j=0\hj&lt;s.neighbors.size()\hj++){&#10;            int n = s.neighbors[j]\h&#10;            if (n!= -1 &amp;&amp; n &gt;= sectors.size()){&#10;                dmLogError(&quot;no neighbor with idx:%d&quot;, n)\h&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;//endregion MAP&#10;&#10;//region PLAYER&#10;&#10;void PlayerInit(int sector, float x, float y){&#10;    player.where = {x,y,0}\h&#10;    player.where.z = sectors[sector].floor + EyeHeight\h&#10;    player.sector = sector\h&#10;    MovePlayer(x,y)\h&#10;}&#10;&#10;//endregion&#10;&#10;&#10;&#10;//draw functions&#10;/* vline: Draw a vertical line on screen, with a different color pixel in top &amp; bottom */&#10;static inline void vline(int x, int y1,int y2, uint32_t top,uint32_t middle,uint32_t bottom)&#10;{&#10;    y1 = clamp(y1, 0, pixelBuffer.height-1)\h&#10;    y2 = clamp(y2, 0, pixelBuffer.height-1)\h&#10;&#10;    if(y2 == y1){&#10;        uint8_t red = (top &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (top &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (top &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y1-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;&#10;    else if(y2 &gt; y1)&#10;    {&#10;        DrawPixel(pixelBuffer,x,pixelBuffer.height - y1,top)\h&#10;&#10;        uint8_t red = (middle &amp; 0xFF000000) &gt;&gt; 24\h&#10;        uint8_t green = (middle &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        uint8_t blue = (middle &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        for(int y=y1+1\h y&lt;y2\h ++y){&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3] = red\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+1] = green\h&#10;            pixelBuffer.stream[((pixelBuffer.height - y-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;        }&#10;&#10;        red = (bottom &amp; 0xFF000000) &gt;&gt; 24\h&#10;        green = (bottom &amp; 0x00FF0000) &gt;&gt; 16\h&#10;        blue = (bottom &amp; 0x0000FF00) &gt;&gt; 8\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3] = red\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+1] = green\h&#10;        pixelBuffer.stream[((pixelBuffer.height - y2-1)*pixelBuffer.width+x)*3+2] = blue\h&#10;    }&#10;}&#10;&#10;&#10;void RenderClearBuffer(){&#10;    clearBuffer(pixelBuffer)\h&#10;}&#10;&#10;void RenderSetBuffer(int width, int height, dmScript::LuaHBuffer* luaBuffer){&#10;&#9;pixelBuffer = createBuffer(width, height, luaBuffer)\h&#10;}&#10;&#10;&#10;void MovePlayer(float x, float y){&#10;    float eyeheight =  EyeHeight\h&#10;    const sector &amp;sect = sectors[player.sector]\h&#10;    const std::vector&lt;int&gt;  vert = sect.vertex\h&#10;    float px = player.where.x, py = player.where.y\h&#10;    float dx = x - player.where.x, dy =y - player.where.y\h&#10;&#10;    //vertical&#10;     /* Vertical collision detection */&#10;    ground = !falling\h&#10;    if(falling){&#10;        player.velocity.z -= 0.05f\h /* Add gravity */&#10;        float nextz = player.where.z + player.velocity.z\h&#10;        if(player.velocity.z &lt; 0 &amp;&amp; nextz  &lt; sectors[player.sector].floor + eyeheight) // When going down&#10;        {&#10;            /* Fix to ground */&#10;            player.where.z    = sectors[player.sector].floor + eyeheight\h&#10;            player.velocity.z = 0\h&#10;            falling = 0\h&#10;            ground  = 1\h&#10;        }&#10;        else if(player.velocity.z &gt; 0 &amp;&amp; nextz &gt; sectors[player.sector].ceil) // When going up&#10;        {&#10;            /* Prevent jumping above ceiling */&#10;            player.velocity.z = 0\h&#10;            falling = 1\h&#10;        }&#10;        if(falling)&#10;        {&#10;            player.where.z += player.velocity.z\h&#10;            moving = 1\h&#10;        }&#10;    }&#10;&#10;    //horizontal&#10;&#10;&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(IntersectBox(px,py, px+dx,py+dy, v.x, v.y, v2.x, v2.y)&#10;            &amp;&amp; PointSide(px+dx, py+dy, v.x, v.y, v2.x, v2.y) &lt; 0){&#10;            /* Check where the hole is. */&#10;            float hole_low  = sect.neighbors[s] &lt; 0 ?  9e9 : max(sect.floor, sectors[sect.neighbors[s]].floor)\h&#10;            float hole_high = sect.neighbors[s] &lt; 0 ? -9e9 : min(sect.ceil,  sectors[sect.neighbors[s]].ceil )\h&#10;            /* Check whether we're bumping into a wall. */&#10;            if(hole_high &lt; player.where.z+HeadMargin&#10;            || hole_low  &gt; player.where.z-eyeheight+KneeHeight){&#10;                /* Bumps into a wall! Slide along the wall. */&#10;                /* This formula is from Wikipedia article &quot;vector projection&quot;. */&#10;                float xd = v2.x - v.x, yd = v2.y - v.y\h&#10;                dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;                dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd)\h&#10;            }&#10;        }&#10;    }&#10;    falling = 1\h&#10;    for(unsigned s = 0\h s &lt; vert.size()-1\h ++s){&#10;        xy v1 =  vertices[vert[s+0]]\h&#10;        xy v2 =  vertices[vert[s+1]]\h&#10;        if(sect.neighbors[s] &gt;= 0&#10;        &amp;&amp; IntersectBox(px,py, px+dx,py+dy, v1.x, v1.y, v2.x, v2.y)&#10;        &amp;&amp; PointSide(px+dx, py+dy, v1.x,v1.y, v2.x, v2.y) &lt; 0)&#10;        {&#10;            player.sector = sect.neighbors[s]\h&#10;            break\h&#10;        }&#10;    }&#10;&#10;    player.where.x = px + dx\h&#10;    player.where.y = py + dy\h&#10;}&#10;&#10;void SetAngle(float angle){&#10;    player.angle = angle\h&#10;    player.anglesin = sinf(player.angle)\h&#10;    player.anglecos = cosf(player.angle)\h&#10;}&#10;&#10;void SetYaw(float yaw){&#10;    player.yaw = yaw\h&#10;}&#10;&#10;void GetPlayerPos(float *x, float *y, float *z){&#10;    *x = player.where.x\h&#10;    *y = player.where.y\h&#10;    *z = player.where.z\h&#10;}  &#10;&#10;void DrawScreen(){&#10;    MovePlayer(player.where.x, player.where.y)\h&#10;    //clearBuffer1(&amp;pixelBuffer)\h&#10;    const int W = pixelBuffer.width\h&#10;    const int H =  pixelBuffer.height\h&#10;&#10;    enum {MaxQueue  =32}\h&#10;    struct item {int sectorno,sx1,sx2\h} queue[MaxQueue ], *head = queue, *tail=queue\h&#10;    std::vector&lt;int&gt; ytop(W)\h // keep track if remaining windom(min,max) in each column&#10;    std::vector&lt;int&gt; ybottom(W, H-1)\h&#10;    std::vector&lt;int&gt; renderedsectors(sectors.size())\h&#10;    //start rendering from player sector&#10;    *head = (struct item) {player.sector,0, W-1}\h&#10;    if (++head == queue + MaxQueue ) head = queue\h&#10;    do{&#10;        //pick a sector then slice from the queue to draw&#10;        const struct item now = *tail\h&#10;        if(++tail == queue + MaxQueue) tail = queue\h&#10;&#10;        if(renderedsectors[now.sectorno] &amp; 0x21) continue\h // Odd = still rendering, 0x20 = give up try 32 times&#10;        ++renderedsectors[now.sectorno]\h&#10;        //const for pointer and const for data&#10;        const sector &amp;sect = sectors[now.sectorno]\h&#10;        //render each wall of player sector that is facing towards player&#10;&#10;        for(unsigned s =0\h s&lt; sect.vertex.size()-1\hs++){&#10;            //acquire the x,y coordinates of the two endpoints(vertices) of thius edge of the sector&#10;            //transform the vertices into the player view&#10;            xy v1 = vertices[sect.vertex[s]], v2 = vertices[sect.vertex[s+1]]\h&#10;            float vx1 = v1.x - player.where.x, vy1 = v1.y- player.where.y\h&#10;            float vx2 = v2.x - player.where.x, vy2 = v2.y- player.where.y\h&#10;            //rotate them around player&#10;            float pcos = player.anglecos, psin = player.anglesin\h&#10;            float tx1 = vx1 * psin - vy1 * pcos, tz1 = vx1 * pcos +vy1 * psin\h&#10;            float tx2 = vx2 * psin - vy2 * pcos, tz2 = vx2 * pcos +vy2 * psin\h&#10;            //is the wall in front of player&#10;            if(tz1&lt;=0 &amp;&amp; tz2 &lt;=0) continue\h&#10;               //if it partialy behind the player, clip it against player's view frustrum&#10;            if(tz1 &lt;= 0 || tz2&lt;=0){&#10;                float nearz = 1.0e-4, farz = 5, nearside = 1.0e-5, farside = 20\h&#10;                //find an intersection between the wall and approximate edges if player's view&#10;                struct xy i1 = Intersect(tx1,tz1,tx2,tz2, - nearside, nearz, -farside, farz)\h&#10;                struct xy i2 = Intersect(tx1,tz1,tx2,tz2, nearside, nearz, farside, farz)\h&#10;                if(tz1 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx1 = i1.x\htz1 = i1.y\h}&#10;                    else{tx1 = i2.x\htz1 = i2.y\h}&#10;                }&#10;                if(tz2 &lt; nearz){&#10;                    if(i1.y &gt; 0){tx2 = i1.x\htz2 = i1.y\h}&#10;                    else{tx2 = i2.x\htz2 = i2.y\h}&#10;                }&#10;            }&#10;            //Perspective transformation&#10;            float xscale1 = hfov / tz1, yscale1 = vfov/tz1\h int x1 = W/2 - (int)(tx1 * xscale1)\h&#10;            float xscale2 = hfov / tz2, yscale2 = vfov/tz2\h int x2 = W/2 - (int)(tx2 * xscale2)\h&#10;            //only render if visible&#10;            //if right vertices is left to screen. Or lefy is right. That mean that edge not visible&#10;            //x1 &gt;= x2 wtf&#10;            if(x1 &gt;= x2 || x2 &lt; now.sx1 || x1 &gt; now.sx2) continue\h&#10;            //acquire the floor and ceilings height, relative to player view\h&#10;            float yceil = sect.ceil - player.where.z\h&#10;            float yfloor = sect.floor - player.where.z\h&#10;&#10;&#10;            //check the edge type, neighor=-1 means wall, other boundary between two sectors.&#10;            int neighbor = sect.neighbors[s]\h&#10;&#10;            float nyceil = 0, nyfloor = 0\h&#10;            if (neighbor&gt;=0){&#10;                nyceil =  sectors[neighbor].ceil - player.where.z\h&#10;                nyfloor = sectors[neighbor].floor - player.where.z\h&#10;            }&#10;             \sdefine Yaw(y,z) (y + z*player.yaw)&#10;            //project floor/ceiling height into screen coordinates(Y)&#10;              int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1)\h&#10;              int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2)\h&#10;              /* The same for the neighboring sector */&#10;              int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1)\h&#10;              int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2)\h&#10;            /*Render the wall */&#10;            int beginx = max(x1, now.sx1), endx = min(x2, now.sx2)\h&#10;            for(int x = beginx\h x&lt;=endx\h ++x){&#10;                /* Calculate the Z coordinate for this point. (Only used for lighting.) */&#10;                int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8\h&#10;                /* Acquire the Y coordinates for our ceiling &amp; floor for this X coordinate. Clamp them. */&#10;                int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = clamp(ya, ytop[x],ybottom[x])\h // top&#10;                int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = clamp(yb, ytop[x],ybottom[x])\h // bottom&#10;                //render ceiling\heverything above this sector's ceiling height&#10;                vline(x,ytop[x],cya-1,0x11111100, 0x22222200, 0x11111100)\h&#10;                //render floor\heverything below this sector's floor height&#10;                 vline(x,cyb+1,ybottom[x],0x0000FF00, 0x0000AA00, 0x0000FF00)\h&#10;&#10;                 if(neighbor &gt;=0){&#10;                    //same for their floor and ceiling&#10;                     int nya = (x-x1) * (ny2a-ny1a)/ (x2-x1) +ny1a, cnya = clamp(nya, ytop[x], ybottom[x])\h//top&#10;                     int nyb = (x-x1) * (ny2b-ny1b)/ (x2-x1) +ny1b, cnyb = clamp(nyb, ytop[x], ybottom[x])\h//bottom&#10;                     //if our ceiling in higher than their ceiling, render upper wall&#10;                    int r1 = 0x01010100 * (255-z), r2 = 0x04000700 * (31-z/8)\h&#10;                    vline(x,cya,cnya-1,0,x==x1 || x==x2 ? 0: r1,0)\h //between our and their ceiling&#10;                      ytop[x] = clamp(max(cya,cnya),ytop[x], H-1)\h&#10;&#10;                      //if our floor is lower than their floor, render bottom wall&#10;                       vline(x,cnyb+1,cyb,0,x==x1 || x==x2 ? 0: r2,0)\h //between their and our floor&#10;                       ybottom[x] = clamp(min(cyb,cnyb),0,ybottom[x])\h&#10;&#10;                 }else{&#10;                    //draw wall&#10;                    unsigned r = 0x01010100 * (255-z)\h&#10;                    vline(x,cya,cyb,0,x==x1 || x==x2 ? 0 : r, 0)\h&#10;                 }&#10;            }&#10;            //shedule the neighbors rendering with it window&#10;            if (neighbor &gt;=0 &amp;&amp; endx &gt;= beginx &amp;&amp; (head + MaxQueue + 1 - tail)%MaxQueue){&#10;                *head = (struct item){neighbor,beginx, endx}\h&#10;                if(++head == queue + MaxQueue) head = queue\h&#10;            }&#10;        }&#10;    ++renderedsectors[now.sectorno]\h&#10;    }while(head!= tail)\h&#10;}#0" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <last-edited>defold_api</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>Lua</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Game Off 2018</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>defold_api(1.2.143)</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>